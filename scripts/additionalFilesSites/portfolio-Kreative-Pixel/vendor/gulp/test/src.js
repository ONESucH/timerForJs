"use strict";var gulp=require("../"),should=require("should"),join=require("path").join;require("mocha"),describe("gulp input stream",function(){describe("src()",function(){it("should return a stream",function(t){var n=gulp.src(join(__dirname,"./fixtures/*.coffee"));should.exist(n),should.exist(n.on),t()}),it("should return a input stream from a flat glob",function(t){var n=gulp.src(join(__dirname,"./fixtures/*.coffee"));n.on("error",t),n.on("data",function(t){should.exist(t),should.exist(t.path),should.exist(t.contents),join(t.path,"").should.equal(join(__dirname,"./fixtures/test.coffee")),String(t.contents).should.equal("this is a test")}),n.on("end",function(){t()})}),it("should return a input stream for multiple globs",function(t){var n=[join(__dirname,"./fixtures/stuff/run.dmc"),join(__dirname,"./fixtures/stuff/test.dmc")],e=gulp.src(n),o=[];e.on("error",t),e.on("data",function(t){should.exist(t),should.exist(t.path),o.push(t)}),e.on("end",function(){o.length.should.equal(2),o[0].path.should.equal(n[0]),o[1].path.should.equal(n[1]),t()})}),it("should return a input stream for multiple globs, with negation",function(t){var n=join(__dirname,"./fixtures/stuff/run.dmc"),e=[join(__dirname,"./fixtures/stuff/*.dmc"),"!"+join(__dirname,"./fixtures/stuff/test.dmc")],o=gulp.src(e),u=[];o.on("error",t),o.on("data",function(t){should.exist(t),should.exist(t.path),u.push(t)}),o.on("end",function(){u.length.should.equal(1),u[0].path.should.equal(n),t()})}),it("should return a input stream with no contents when read is false",function(t){var n=gulp.src(join(__dirname,"./fixtures/*.coffee"),{read:!1});n.on("error",t),n.on("data",function(t){should.exist(t),should.exist(t.path),should.not.exist(t.contents),join(t.path,"").should.equal(join(__dirname,"./fixtures/test.coffee"))}),n.on("end",function(){t()})}),it("should return a input stream with contents as stream when buffer is false",function(t){var n=gulp.src(join(__dirname,"./fixtures/*.coffee"),{buffer:!1});n.on("error",t),n.on("data",function(n){should.exist(n),should.exist(n.path),should.exist(n.contents);var e="";n.contents.on("data",function(t){e+=t}),n.contents.on("end",function(){e.should.equal("this is a test"),t()}),join(n.path,"").should.equal(join(__dirname,"./fixtures/test.coffee"))})}),it("should return a input stream from a deep glob",function(t){var n=gulp.src(join(__dirname,"./fixtures/**/*.jade"));n.on("error",t),n.on("data",function(t){should.exist(t),should.exist(t.path),should.exist(t.contents),join(t.path,"").should.equal(join(__dirname,"./fixtures/test/run.jade")),String(t.contents).should.equal("test template")}),n.on("end",function(){t()})}),it("should return a input stream from a deeper glob",function(t){var n=gulp.src(join(__dirname,"./fixtures/**/*.dmc")),e=0;n.on("error",t),n.on("data",function(){++e}),n.on("end",function(){e.should.equal(2),t()})}),it("should return a file stream from a flat path",function(t){var n=0,e=gulp.src(join(__dirname,"./fixtures/test.coffee"));e.on("error",t),e.on("data",function(t){++n,should.exist(t),should.exist(t.path),should.exist(t.contents),join(t.path,"").should.equal(join(__dirname,"./fixtures/test.coffee")),String(t.contents).should.equal("this is a test")}),e.on("end",function(){n.should.equal(1),t()})})})});
//# sourceMappingURL=src.js.map

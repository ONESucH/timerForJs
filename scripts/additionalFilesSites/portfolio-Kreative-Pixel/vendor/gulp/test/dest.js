"use strict";var gulp=require("../"),should=require("should"),join=require("path").join,rimraf=require("rimraf"),fs=require("graceful-fs");require("mocha");var outpath=join(__dirname,"./out-fixtures");describe("gulp output stream",function(){describe("dest()",function(){function t(t,e){var o=gulp.src(join(__dirname,"./fixtures/stuff"),t),i=o.pipe(gulp.dest(outpath));i.on("error",e),i.on("data",function(t){should.exist(t),should.exist(t.path),join(t.path,"").should.equal(join(outpath,"./stuff"))}),i.on("end",function(){fs.exists(join(outpath,"stuff"),function(t){should(t).be.ok,e()})})}beforeEach(rimraf.bind(null,outpath)),afterEach(rimraf.bind(null,outpath)),it("should return a stream",function(t){var e=gulp.dest(join(__dirname,"./fixtures/"));should.exist(e),should.exist(e.on),t()}),it("should return a output stream that writes files",function(t){var e=gulp.src(join(__dirname,"./fixtures/**/*.txt")),o=gulp.dest(outpath);e.pipe(o),o.on("error",t),o.on("data",function(t){should.exist(t),should.exist(t.path),should.exist(t.contents),join(t.path,"").should.equal(join(outpath,"./copy/example.txt")),String(t.contents).should.equal("this is a test")}),o.on("end",function(){fs.readFile(join(outpath,"copy","example.txt"),function(e,o){should.not.exist(e),should.exist(o),String(o).should.equal("this is a test"),t()})})}),it("should return a output stream that does not write non-read files",function(t){var e=gulp.src(join(__dirname,"./fixtures/**/*.txt"),{read:!1}),o=gulp.dest(outpath);e.pipe(o),o.on("error",t),o.on("data",function(t){should.exist(t),should.exist(t.path),should.not.exist(t.contents),join(t.path,"").should.equal(join(outpath,"./copy/example.txt"))}),o.on("end",function(){fs.readFile(join(outpath,"copy","example.txt"),function(e,o){should.exist(e),should.not.exist(o),t()})})}),it("should return a output stream that writes streaming files",function(t){var e=gulp.src(join(__dirname,"./fixtures/**/*.txt"),{buffer:!1}),o=e.pipe(gulp.dest(outpath));o.on("error",t),o.on("data",function(t){should.exist(t),should.exist(t.path),should.exist(t.contents),join(t.path,"").should.equal(join(outpath,"./copy/example.txt"))}),o.on("end",function(){fs.readFile(join(outpath,"copy","example.txt"),function(e,o){should.not.exist(e),should.exist(o),String(o).should.equal("this is a test"),t()})})}),it("should return a output stream that writes streaming files into new directories",function(e){t({},e)}),it("should return a output stream that writes streaming files into new directories (buffer: false)",function(e){t({buffer:!1},e)}),it("should return a output stream that writes streaming files into new directories (read: false)",function(e){t({read:!1},e)}),it("should return a output stream that writes streaming files into new directories (read: false, buffer: false)",function(e){t({buffer:!1,read:!1},e)})})});
//# sourceMappingURL=dest.js.map
